@page "/"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SfSchedule TValue="AppointmentData" Height="650px" @bind-SelectedDate="@CurrentDate">
    <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.WorkWeek"></ScheduleView>
        <ScheduleView Option="View.Month"></ScheduleView>
        <ScheduleView Option="View.Agenda"></ScheduleView>
    </ScheduleViews>
</SfSchedule>

<br />
<br />

<SfChart>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@Sales" XName="Month" YName="SalesValue" Type="ChartSeriesType.Column">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>

<br />
<br />

<SfRichTextEditor>
    <RichTextEditorToolbarSettings Items="@Tools" />
    <p>The Rich Text Editor component is WYSIWYG ('what you see is what you get') editor that provides the best user experience to create and update the content. Users can format their content using standard toolbar commands.</p>
    <p><b> Key features:</b></p>
    <ul>
        <li><p> Provides <b>IFRAME</b> and <b>DIV</b> modes </p></li>
        <li><p> Capable of handling markdown editing.</p></li>
        <li><p> Contains a modular library to load the necessary functionality on demand.</p></li>
        <li><p> Provides a fully customizable toolbar.</p></li>
        <li><p> Provides HTML view to edit the source directly for developers.</p></li>
        <li><p> Supports third - party library integration.</p></li>
        <li><p> Allows preview of modified content before saving it.</p></li>
    </ul>
</SfRichTextEditor>

<br />
<br />

<SfKanban TValue="TasksModel" KeyField="Status" DataSource="Tasks">
    <KanbanColumns>
        <KanbanColumn HeaderText="To Do" KeyField="@(new List<string>() {"Open"})"></KanbanColumn>
        <KanbanColumn HeaderText="In Progress" KeyField="@(new List<string>() {"InProgress"})"></KanbanColumn>
        <KanbanColumn HeaderText="Testing" KeyField="@(new List<string>() {"Testing"})"></KanbanColumn>
        <KanbanColumn HeaderText="Done" KeyField="@(new List<string>() {"Close"})"></KanbanColumn>
    </KanbanColumns>
    <KanbanCardSettings HeaderField="Title" ContentField="Summary"></KanbanCardSettings>
</SfKanban>

@code {
	DateTime CurrentDate = new DateTime(2020, 2, 14);
	List<AppointmentData> DataSource = new List<AppointmentData>
	{
		new AppointmentData { Id = 1, Subject = "Paris", StartTime = new DateTime(2020, 2, 13, 10, 0, 0) , EndTime = new DateTime(2020, 2, 13, 12, 0, 0) },
		new AppointmentData { Id = 2, Subject = "Germany", StartTime = new DateTime(2020, 2, 15, 10, 0, 0) , EndTime = new DateTime(2020, 2, 15, 12, 0, 0) }
	};
	public class AppointmentData
	{
		public int Id { get; set; }
		public string Subject { get; set; }
		public string Location { get; set; }
		public DateTime StartTime { get; set; }
		public DateTime EndTime { get; set; }
		public string Description { get; set; }
		public bool IsAllDay { get; set; }
		public string RecurrenceRule { get; set; }
		public string RecurrenceException { get; set; }
		public Nullable<int> RecurrenceID { get; set; }
	}


	public class SalesInfo
	{
		public string Month { get; set; }
		public double SalesValue { get; set; }
	}
	public List<SalesInfo> Sales = new List<SalesInfo>
	{
		new SalesInfo { Month = "Jan", SalesValue = 35 },
		new SalesInfo { Month = "Feb", SalesValue = 28 },
		new SalesInfo { Month = "Mar", SalesValue = 34 },
		new SalesInfo { Month = "Apr", SalesValue = 32 },
		new SalesInfo { Month = "May", SalesValue = 40 },
		new SalesInfo { Month = "Jun", SalesValue = 32 },
		new SalesInfo { Month = "Jul", SalesValue = 35 }
	};

	private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
	{
		new ToolbarItemModel() { Command = ToolbarCommand.Bold },
		new ToolbarItemModel() { Command = ToolbarCommand.Italic },
		new ToolbarItemModel() { Command = ToolbarCommand.Underline },
		new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
		new ToolbarItemModel() { Command = ToolbarCommand.FontName },
		new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
		new ToolbarItemModel() { Command = ToolbarCommand.Separator },
		new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
		new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
		new ToolbarItemModel() { Command = ToolbarCommand.Separator },
		new ToolbarItemModel() { Command = ToolbarCommand.Formats },
		new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
		new ToolbarItemModel() { Command = ToolbarCommand.Separator },
		new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
		new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
		new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
		new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
		new ToolbarItemModel() { Command = ToolbarCommand.Separator },
		new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
		new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
		new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
		new ToolbarItemModel() { Command = ToolbarCommand.Indent },
		new ToolbarItemModel() { Command = ToolbarCommand.Separator },
		new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
		new ToolbarItemModel() { Command = ToolbarCommand.Image },
		new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
		new ToolbarItemModel() { Command = ToolbarCommand.Separator },
		new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
		new ToolbarItemModel() { Command = ToolbarCommand.Print },
		new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
		new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
		new ToolbarItemModel() { Command = ToolbarCommand.Separator },
		new ToolbarItemModel() { Command = ToolbarCommand.Undo },
		new ToolbarItemModel() { Command = ToolbarCommand.Redo }
	};


	public class TasksModel
	{
		public string Id { get; set; }
		public string Title { get; set; }
		public string Status { get; set; }
		public string Summary { get; set; }
	}
	public List<TasksModel> Tasks = new List<TasksModel>()
	{
		new TasksModel { Id = "Task 1", Title = "BLAZ-29001", Status = "Open", Summary = "Analyze the new requirements gathered from the customer." },
		new TasksModel { Id = "Task 2", Title = "BLAZ-29002", Status = "Open", Summary = "Show the retrieved data from the server in grid control." },
		new TasksModel { Id = "Task 3", Title = "BLAZ-29003", Status = "InProgress", Summary = "Improve application performance" },
		new TasksModel { Id = "Task 4", Title = "BLAZ-29004", Status = "Testing", Summary = "Fix the issues reported by the customer." },
		new TasksModel { Id = "Task 5", Title = "BLAZ-29005", Status = "Testing", Summary = "Fix the issues reported in Safari browser." },
		new TasksModel { Id = "Task 6", Title = "BLAZ-29006", Status = "Close", Summary = "Analyze SQL server 2008 connection." },
		new TasksModel { Id = "Task 7", Title = "BLAZ-29007", Status = "Close", Summary = "Analyze grid control." },
		new TasksModel { Id = "Task 8", Title = "BLAZ-29008", Status = "Close", Summary = "Stored procedure for initial data binding of the grid." }
	};
}