@page "/counter"
@using BlazorWebAssemblyRadzen.Models

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<br/>
<br />

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
				Data="@employees" TItem="Employee" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedEmployees @ref="_radzenDataGrid">
    <Columns>
        <RadzenDataGridColumn TItem="Employee" Property="FirstName" Title="First Name" Width="160px" />
        <RadzenDataGridColumn TItem="Employee" Property="LastName" Title="Last Name" Width="160px"/>
        <RadzenDataGridColumn TItem="Employee" Property="BirthDate" Title="Birth Date" FormatString="{0:d}" Width="160px" />
    </Columns>
</RadzenDataGrid>

<br />
<br />

<RadzenTemplateForm Data="@_employee" Submit="@((Employee args) => { Submit(args); })">

    <div class="mb-3">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Imię</RadzenText>
        <RadzenTextBox Style="display: block" Name="FirstName" @bind-Value=@_employee.FirstName class="w-50" />
        <RadzenRequiredValidator Component="FirstName" Text="Imię jest wymagane" Style="position: absolute" />
    </div>

    <div class="mb-3">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Nazwisko</RadzenText>
        <RadzenTextBox @bind-Value=@_employee.LastName class="w-50" />
    </div>

    <div class="mb-3">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Data urodzenia</RadzenText>
        <RadzenDatePicker @bind-Value=@_employee.BirthDate class="w-50" DateFormat="dd-MM-yyyyy" />
    </div>

    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save" />

</RadzenTemplateForm>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }


	IList<Employee> employees;
	IList<Employee> selectedEmployees;
	private RadzenDataGrid<Employee> _radzenDataGrid;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		employees = employees = new List<Employee>
		{
			new Employee { FirstName = "Jan", LastName = "Kowalski", BirthDate = new DateTime(1966, 11, 11)},
			new Employee { FirstName = "Marek", LastName = "Nowak", BirthDate = new DateTime(1976, 3, 2)},
			new Employee { FirstName = "Joanna", LastName = "Kwiatkowska", BirthDate = new DateTime(2000, 1, 4)},
			new Employee { FirstName = "Dominik", LastName = "Kowalski", BirthDate = new DateTime(1996, 12, 12)},
			new Employee { FirstName = "Bogdan", LastName = "Kowalski", BirthDate = new DateTime(2001, 4, 22)},
			new Employee { FirstName = "Błażej", LastName = "Kowalski", BirthDate = new DateTime(1999, 4, 22)}
		};

		selectedEmployees = new List<Employee>() { employees.FirstOrDefault() };
	}

	[Inject]
	public NotificationService NotificationService { get; set; }
	private Employee _employee = new Employee();
	async Task Submit(Employee arg)
	{
		// dodaj do listy nowego pracownika
		employees.Add(_employee);

		// wyzeruj obiekt powiązany z formularzem
		_employee = new Employee();

		// odświeżenie widoku grida
		await _radzenDataGrid.Reload();

		NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sukces", Detail = "Użytkownicy zostali zaktualizowani", Duration = 4000 });
	}
}
