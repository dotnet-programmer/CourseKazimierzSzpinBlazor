@* 
	routing - strona_główna/counter
	wiele ścieżek do 1 strony:
*@
@page "/counter"
@page "/counter-test"

@*
	Przekazanie parametru do strony poprzez ścieżkę:
	header - nazwa parametru, żeby go użyć trzeba w code-behind dodać nową właściwość o takiej nazwie z atrybutem [Parameter]
	Jeżeli parametr ma być opcjonalny, to po nazwie trzeba dodać znak zapytania:
		@page "/counter-parameter/{header?}
	Jeżeli nie zostanie wskazany typ parametru, to domyślnie jest to string.
	Żeby wskazać typ parametru trzeba po nazwie parametru dopisać ":int" dla inta itp.
	Parametrów może byc wiele, oddziela się je ukośnikami.
	*@
@page "/counter-parameter/{header:int}/{isDeleted:bool?}"

@* 
	jest jeszcze jeden sposób przekazywania parametrów przez ścieżkę adresu:
	doklejając po znaku zapytania nazwę parametru z przypisaniem wartości: localhost/counter?arg1=1
	implementacja tego sposobu znajduje się w pliku .cs
*@

@* dodanie jakiegoś namespace żeby uprościć nazwy *@
@using BlazorWebAssembly.Components.Common;

<PageTitle>Counter</PageTitle>

@* Wstawienie HTML do sekcji HEAD w index.html, ten wpis będzie dodawany tylko na tej stronie *@
<HeadContent>
	<meta name="description" content="Strona Blazor - meta desc" />
	<meta name="keywords" content="programowanie, aplikacja, blazor" />
</HeadContent>

@* Sekcje - to co jest w SectionContent trafia do SectionOutlet o podanym Id i będzie tam wyświetlone *@
<SectionContent SectionId="MainLayout.TopSection">
	<p>Podstrona counter. Licznik: @_currentCount</p>
</SectionContent>

<h1>Counter</h1>

@* Odczytanie parametru podanego do strony poprzez ścieżkę: *@
<h2>Wartość parametru "header" przekazanego poprzez ścieżkę: @Header</h2>
<h2>Wartość drugiego parametru "isDeleted" przekazanego poprzez ścieżkę:</h2>
@if (!IsDeleted.HasValue)
{
	<p>NULL</p>
}
else if (IsDeleted.GetValueOrDefault())
{
	<p>TRUE</p>
}
else
{
	<p>FALSE</p>
}

<h2>Wartość parametru przekazanego poprzez ścieżkę po znaku zapytania z podaniem nazwy właściwości: @Header2</h2>

<p role="status">Current count: @_currentCount</p>

@* Powiązanie zdarzenia onclick z metodą stworzoną w C# *@
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />
<button class="btn btn-primary my-3" @onclick="ToggleActive">Przełącz tryb</button>
@* rzutowanie tekstu na MarkupString, żeby HTML był potraktowany jako znacznik HTML, a nie zwykły tekst: *@
@(_isActive ? (MarkupString)"<p class='text - light bg - success p - 2'>AKTYWNY</p>" : (MarkupString)"<p class='text - light bg - danger p - 2'>NIEAKTYWNY</p>")
<p class="text-light bg-info p-2">Ten produkt jest: @(_isActive ? "AKTYWNY" : "NIEAKTYWNY") </p>
<p class="text-light @(_isActive ? "bg-success" : "bg-danger") p-2">Ten produkt jest: @(_isActive ? "AKTYWNY" : "NIEAKTYWNY") </p>

<hr />

@* Użycie komponentu bez użycia Globa Using - trzeba podać pełną nazwę zawierającą cały namespace *@
<BlazorWebAssembly.Components.Common.Table></BlazorWebAssembly.Components.Common.Table>
<br />
<hr />

@* Użycie komponentu używając using *@
<Table></Table>
<br />

<Table />
<br />
<hr />

<button class="btn btn-primary mb-3" @onclick="AddStudent">Dodaj studenta</button>
<p>Ilość uczniów: @StudentRepo.GetAllStudents().Count</p>
<h3>Studenci:</h3>
<ul>
	@foreach (var item in StudentRepo.GetAllStudents())
	{
		<li>@item.Name</li>
	}
</ul>

<hr />

@* Navigation Manager - przemieszczanie się w kodzie między stronami *@
<button class="btn btn-primary my-3" @onclick="GoToIndex">Strona główna</button>
<button class="btn btn-primary my-3" @onclick="GoToSiteWithParameters">Przekaż parametry przez scieżkę po ukośnikach</button>
<button class="btn btn-primary my-3" @onclick="GoToSiteWithParametersFromQuery">Przekaż parametry przez scieżkę po znaku zapytania</button>

@* Sekcja @code przeniesiona do pliku code-behind: Counter.razor.cs *@
@* @code {} *@