@page "/weather"

@* Wstrzyknięcie serwisu HttpClient przez DI *@
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@* 
	ta instrukcja działa tak, że po wejściu na stronę tablica forecasts jest pusta więc wywietli się "Loading"
	ale jak w części code dane się załadują to warunk jest sprawdzany jeszcze raz i wtedy wyświetli się cała tabela 
	w zwykłym ASP.NET Core do takich zmian trzeba było używać ajaxa
*@
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@* Wstrzyknięty serwis HttpClient można używać w tej sekcji z kodem C# *@
@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
		// sztuczne opóźnienie do testów
		await Task.Delay(2000);
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}