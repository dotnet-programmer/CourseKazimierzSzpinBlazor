@page "/counter"
@using Blazored.LocalStorage
@using SimpleShop.Shared.Products.Dtos
@rendermode InteractiveAuto

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    // Local Storage
    [Inject]
    public ILocalStorageService LocalStorage { get; set; }

    private async Task IncrementCount()
    {
        currentCount++;
        // zapisanie aktualnej wartości licznika do LocalStorage
        // key - "counter" jest kluczem (nazwą), pod którym przechowujemy wartość
        // data - tutaj będą dane do zapisania, w tym przypadku aktualna wartość licznika
		await LocalStorage.SetItemAsync("counter", currentCount);
	}

	// // jeżeli włączony prerendering, to w OnInitialize nie można pobrać danych z LocalStorage
	// protected override async Task OnInitializedAsync()
	// {
	// 	// przy takim zapisie będzie błąd - JavaScript nie może zostać wykonany
	// 	var counter = await LocalStorage.GetItemAsync<int>("counter");
	// 	currentCount = counter;
	// }
	// można to naprawić wywołując LocalStorage w OnAfterRenderAsync
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var counter = await LocalStorage.GetItemAsync<int>("counter");
			currentCount = counter;
			
			// wywołanie tej metody spowoduje zaktualizowanie wartości na widoku
			StateHasChanged();
		}
	}
}